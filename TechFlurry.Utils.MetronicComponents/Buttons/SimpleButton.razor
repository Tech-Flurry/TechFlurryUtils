@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject ICommonFunctions _functions
@implements IAsyncDisposable


<button @ref="e" type="button" @onclick="OnClick" @attributes="InputAttributes" class="@css" title="@Title">@ChildContent</button>

@code {
    ElementReference e;

    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string CssClass { get; set; }
    [Parameter]
    public ThemeColors Color { get; set; }
    [Parameter]
    public bool IsLightColor { get; set; }
    [Parameter]
    public bool IsOutlined { get; set; }
    [Parameter]
    public string ToolTip { get; set; }
    [Parameter]
    public bool IsBlockButton { get; set; }
    [Parameter]
    public bool IsLinkButton { get; set; }
    [Parameter]
    public Positions ToolTipPosition { get; set; }
    [Parameter]
    public FontWeights? FontWeight { get; set; }
    [Parameter]
    public bool IsActive { get; set; }
    [Parameter]
    public ButtonSizes? Size { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool IsDisabled { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    string css;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override void OnParametersSet()
    {
        StringBuilder cssBuilder = new StringBuilder();
        if (!IsLinkButton)
        {
            cssBuilder.Append($"btn btn-{(IsLightColor ? "light-" : IsOutlined ? "outline-" : string.Empty)}{Color.ToString().ToLower()}");
        }
        else
        {
            cssBuilder.Append($"btn btn-link");
        }
        if (IsBlockButton)
        {
            cssBuilder.Append(" btn-block");
        }
        if (FontWeight is not null)
        {
            cssBuilder.Append($" font-weight-{FontWeight?.ToString().ToLower()}");
        }
        if (Size is not null)
        {
            cssBuilder.Append($" btn-{Size?.ToString().ToLower()}");
        }
        if (IsActive)
        {
            cssBuilder.Append(" active");
        }
        css = cssBuilder.ToString();
        base.OnParametersSet();
        InputAttributes ??= new Dictionary<string, object>();
        if (!string.IsNullOrEmpty(ToolTip) && !string.IsNullOrWhiteSpace(ToolTip))
        {
            InputAttributes.TryAdd("data-toggle", "tooltip");
            InputAttributes.TryAdd("data-placement", ToolTipPosition.ToString().ToLower());
        }
        else
        {
            InputAttributes.Remove("data-toggle");
            InputAttributes.Remove("data-placement");
        }
        if (IsDisabled)
        {
            InputAttributes.TryAdd("disabled", "disabled");
        }
        else
        {
            InputAttributes.Remove("disabled");
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(ToolTip))
            {
                _functions.InitToolTip(e);
            }
        }
        base.OnAfterRender(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        await _functions.HideToolTip(e);
    }
}
