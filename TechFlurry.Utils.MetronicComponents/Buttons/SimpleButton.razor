@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@if (string.IsNullOrEmpty(ToolTip) || string.IsNullOrWhiteSpace(ToolTip))
{
    if (!IsDisabled)
    {
        <button @onclick="OnClick" @attributes="InputAttributes" class="@css" disabled title="@Title">@ChildContent</button>
    }
    else
    {
        <button @onclick="OnClick" @attributes="InputAttributes" class="@css" title="@Title">@ChildContent</button>
    }
}
else
{
    if (!IsDisabled)
    {
        <button @onclick="OnClick" @attributes="InputAttributes" class="@css" data-toggle="tooltip" title="@ToolTip" data-placement="@ToolTipPosition.ToString().ToLower()">@ChildContent</button>
    }
    else
    {
        <button @onclick="OnClick" @attributes="InputAttributes" class="@css" data-toggle="tooltip" title="@ToolTip" data-placement="@ToolTipPosition.ToString().ToLower()" disabled>@ChildContent</button>
    }
}

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string CssClass { get; set; }
    [Parameter]
    public ThemeColors Color { get; set; }
    [Parameter]
    public bool IsLightColor { get; set; }
    [Parameter]
    public bool IsOutlined { get; set; }
    [Parameter]
    public string ToolTip { get; set; }
    [Parameter]
    public bool IsBlockButton { get; set; }
    [Parameter]
    public bool IsLinkButton { get; set; }
    [Parameter]
    public Positions ToolTipPosition { get; set; }
    [Parameter]
    public FontWeights? FontWeight { get; set; }
    [Parameter]
    public bool IsActive { get; set; }
    [Parameter]
    public ButtonSizes? Size { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool IsDisabled { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    string css;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override void OnParametersSet()
    {
        StringBuilder cssBuilder = new StringBuilder();
        if (!IsLinkButton)
        {
            cssBuilder.Append($"btn btn-{(IsLightColor ? "light-" : IsOutlined ? "outline-" : string.Empty)}{Color.ToString().ToLower()}");
        }
        else
        {
            cssBuilder.Append($"btn btn-link");
        }
        if (IsBlockButton)
        {
            cssBuilder.Append(" btn-block");
        }
        if (FontWeight is not null)
        {
            cssBuilder.Append($" font-weight-{FontWeight?.ToString().ToLower()}");
        }
        if (Size is not null)
        {
            cssBuilder.Append($" btn-{Size?.ToString().ToLower()}");
        }
        if (IsActive)
        {
            cssBuilder.Append(" active");
        }
        css = cssBuilder.ToString();
        base.OnParametersSet();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
}
