@{
    var style2Class = string.Empty;
    if (Style == AlertOutlineStyles.Style2)
    {
        style2Class = "alert-outline-2x";
    }
}

<div class="alert alert-custom alert-outline-@Color.ToString().ToLower() fade show mb-5 @CssClass" role="alert">
    @if (Icon is not null)
    {
        <div class="alert-icon">@Icon</div>
    }
    @if (ChildContent is null)
    {
        <AlertText Text="@Text"></AlertText>
    }
    else
    {
        @ChildContent
    }
    @if (HasCloseButton)
    {
        <div class="alert-close">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true"><i class="ki ki-close"></i></span>
            </button>
        </div>
    }
</div>



@code {
    [Parameter]
    public ThemeColors Color { get; set; }
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public AlertOutlineStyles Style { get; set; }
    [Parameter]
    public string CssClass { get; set; }
    [Parameter]
    public bool HasCloseButton { get; set; }
    [Parameter]
    public RenderFragment Icon { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }
}
