
@typeparam T
@inherits CheckBoxGroupBase<T, string>


<div class="checkbox-@(IsInline?"inline":"list")">
    @foreach (var item in Items)
    {
        <label class="checkbox @(Style is not null?$"checkbox-{Style?.ToString().ToLower()}":string.Empty) @(IsDisabled?$"checkbox-disabled":string.Empty) @(Color is not null?$"checkbox-{Color?.ToString().ToLower()}":string.Empty) @(IsOutlined || IsDoubledOutlined?$"checkbox-outline{(IsDoubledOutlined?" checkbox-outline-2x":string.Empty)}":string.Empty)">
            <input type="checkbox" name="@Name" checked="@(Value?.Any(x=>x.Equals(item.Key)))" @onchange="e=>{OnChange(item.Key,e);}" value="@item.Key" @attributes="inputAttributes" />
            <span></span>
            @item.Value
        </label>
    }
</div>
@if (!string.IsNullOrEmpty(HelpText))
{
    <span class="form-text text-muted">@HelpText</span>
}

@code {
    [Parameter]
    public bool IsDisabled { get; set; }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (IsDisabled)
        {
            inputAttributes.Add("disabled", "disabled");
        }
    }
}