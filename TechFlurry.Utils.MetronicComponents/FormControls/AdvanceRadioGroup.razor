
@typeparam TValue
@typeparam TDisplay
@inherits RadioGroupBase<TValue, TDisplay>

<div class="radio-@(IsInline?"inline":"list")">
    @foreach (var item in Items)
    {
        inputAttributes.Clear();
        if (DisableExpression?.Invoke(item.Key)??false)
        {
            inputAttributes.Add("disabled", "disabled");
        }
        <label class="radio @(Style is not null?$"radio-{Style?.ToString().ToLower()}":string.Empty) @((DisableExpression?.Invoke(item.Key)??false)?$"radio-disabled":string.Empty) @(IsAccent?$"radio-accent":string.Empty) @(Color is not null?$"radio-{Color?.ToString().ToLower()}":string.Empty) @(IsOutlined || IsDoubledOutlined?$"radio-outline{(IsDoubledOutlined?" radio-outline-2x":string.Empty)}":string.Empty)">
            <input type="radio" name="@name" @attributes="inputAttributes"
               value="@item.Key" checked="@(item.Key.Equals(Value))" @onchange="OnChange" />
            <span></span>
            @ChildContent(item.Value)
        </label>
    }
</div>
@if (!string.IsNullOrEmpty(HelpText))
{
    <span class="form-text text-muted">@HelpText</span>
}

@code {
    [Parameter]
    public RenderFragment<TDisplay> ChildContent { get; set; }
    [Parameter]
    public Predicate<TValue> DisableExpression { get; set; }
}
